<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="kr.or.ddit.servlet03.dao.IDDITStudentDAO">
	<sql id="searchFrag">
		<where>
			<if test="searchVO!=null and @org.apache.commons.lang3.StringUtils@isNotBlank(searchVO.searchWord)">
				<choose>
					<when test="'name'.equals(searchVO.searchType)">
	    				NAME LIKE '%'||#{searchVO.searchWord}||'%'
					</when>
					<when test="'career'.equals(searchVO.searchType)">
		    			INSTR(CAREER, #{searchVO.searchWord}) > 0
					</when>
					<otherwise>
		    			NAME LIKE '%'||#{searchVO.searchWord}||'%'
		    			OR INSTR(CAREER, #{searchVO.searchWord}) > 0
					</otherwise>
				</choose>
			</if>
		</where>
	</sql>
	<select id="selectStudentCount" resultType="int" parameterType="PagingVO">
		SELECT COUNT(*)
		FROM DDITSTUDENT
		<include refid="searchFrag"/>
	</select>
	<select id="selectStudentList" resultType="DDITStudentVO" parameterType="PagingVO">
		SELECT B.*
		FROM(
			SELECT ROWNUM RNUM, A.* 
			FROM (
				SELECT   CODE,    NAME,    AGE,  	    
					 DECODE(GEN, 'M', '남', '여') GEN, 	CAREER 
				FROM    DDITSTUDENT 
				<include refid="searchFrag"/>
				ORDER BY CODE DESC
			) A
		) B 
		WHERE RNUM BETWEEN #{startRow} AND #{endRow}              
	</select>
	
	<resultMap type="DDITStudentVO" id="studentMap" autoMapping="true">
		<id property="code" column="CODE"/>
		<collection property="license" javaType="java.util.List" ofType="string">
			<result property="" column="LICENSE"/>
		</collection>		
	</resultMap>
	
	<select id="selectStudent" parameterType="string" resultMap="studentMap">
		SELECT A.CODE, NAME, TO_CHAR(BIRTHDAY, 'YYYY-MM-DD') BIRTHDAY, AGE,
		        B.TEXT GRADE, GEN,						               
		        CAREER, D.TEXT LICENSE                                     
		FROM DDITSTUDENT A LEFT OUTER JOIN GRADE B ON (A.GR_CODE = B.CODE)        
		       LEFT OUTER JOIN STD_LICENSE C ON(A.CODE = C.STD_CODE)       
		       LEFT OUTER JOIN LICENSE D ON (C.LIC_CODE = D.CODE)          
		WHERE A.CODE = #{code}                                              
	</select>
	
	<insert id="insertStudent" parameterType="DDITStudentVO">
		<selectKey resultType="string" keyProperty="code" order="BEFORE">
			SELECT 'S'|| LPAD(TO_NUMBER(SUBSTR(MAX(CODE), 2))+1, 3, '0')
			FROM DDITSTUDENT                                            
		</selectKey>
		INSERT ALL
		INTO DDITSTUDENT (                       
		    CODE,		    NAME,		    BIRTHDAY,   
		    AGE,		    GR_CODE,		    GEN,    
		    CAREER                                      
		) VALUES (                                      
			#{code,jdbcType=CHAR},		    #{name,jdbcType=VARCHAR},		    
			TO_DATE(#{birthday,jdbcType=DATE}, 'YYYY-MM-DD'),   
		    #{age,jdbcType=NUMERIC},		    #{grade,jdbcType=CHAR},		    #{gen,jdbcType=CHAR},    
		    #{career,jdbcType=VARCHAR}                                    
		)        
		<foreach collection="lic_codes" item="licCode" >
			INTO STD_LICENSE (STD_CODE, LIC_CODE) VALUES (#{code}, #{licCode})
		</foreach>       
		SELECT * FROM DUAL                              
	</insert>
	<update id="updateStudent" parameterType="DDITStudentVO">
		UPDATE DDITSTUDENT 
	    SET                
	     NAME		=		#{name,jdbcType=VARCHAR},  
	     BIRTHDAY	= TO_DATE(#{birthday,jdbcType=DATE}, 'YYYY-MM-DD'),
	     AGE		=		#{age,jdbcType=NUMERIC},   
	     GR_CODE	=		#{grade,jdbcType=CHAR},   
	     GEN		=		#{gen,jdbcType=CHAR},   
	     CAREER		=		#{career,jdbcType=VARCHAR}    
		WHERE  CODE	=		#{code,jdbcType=VARCHAR} 
	</update>
	
	<delete id="deleteStudent" parameterType="string">
		DELETE FROM DDITSTUDENT
		WHERE CODE = #{code}
	</delete>
</mapper>